# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 80  # number of classes
depth_multiple: 0.33  # model depth multiple, the number of backbone
width_multiple: 0.50  # layer channel multiple, the number in args of backbone
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  # - [30,61, 62,45, 59,119]  # P4/16
  # - [116,90, 156,198, 373,326]  # P5/32
# Conv  的卷积核的大小
# YOLOv5 v6.0 backbone
# 1. [-1, 1, Conv, [64, 6, 2, 2]]
## 64 表示这一层的设定的输出通道数，实际输出是 64 * width_multiple = 32; 
## 6 kernel_size 卷积核的大小, 默认是1
## 2 stride，默认是1 
## 2 padding，默认 None
backbone:
  # [from, number, module, args]
  # number 重复组块的数量。实际的数量为 number*depth_multiple， 如 [-1, 6, C3, [256]] 中的 实际组块为 6*0.33=2
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2, Conv: conv -> bn -> act.  这一层的输出通道： 64 * width_multiple = 32；  [64, 6, 2, 2]: 64 这一层的设定的输出通道数，实际输出是 64 * width_multiple = 32; 
   [-1, 1, Conv, [128, 3, 2]],    # 1-P2/4    这一层的输出通道： 128 * width_multiple = 64
   [-1, 3, C3, [128]],          # # CSP Bottleneck with 3 convolutions
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],          # 6 控制的是 bottle 层数量，实际数量为 6 * depth_multiple = 6 *0.33 = 2
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13,  False 代表在 Bottleneck 中不使用 shortcut

   [-1, 1, Conv, [256, 1, 1]], # 14-P4
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3, P3: [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8     ????
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

  #  [-1, 1, Conv, [256, 3, 2]],
  #  [[-1, 14], 1, Concat, [1]],  # cat head P4
  #  [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

  #  [-1, 1, Conv, [512, 3, 2]],
  #  [[-1, 10], 1, Concat, [1]],  # cat head P5
  #  [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

  #  [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
   [[17], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
# nc： 类别数量
# anchors： 候选框

# 一些疑问
# 1.第一个卷积层，为什么使用的是 6x6 的kernel size
# 2. onnx 模型显示维度信息 v


#  x[i].view(bs, self.na, self.no, ny, nx)                              # x(bs,255,20,20) to x(bs,3,85,20,20)
#  x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2)       # x(bs,3,85,20,20) to x(bs,3,20,20,85)